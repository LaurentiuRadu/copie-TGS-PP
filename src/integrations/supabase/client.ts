// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logger } from '@/lib/logger';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Enhanced storage adapter that works reliably across all platforms
const reliableStorageAdapter = {
  getItem: (key: string) => {
    try {
      const value = localStorage.getItem(key);
      if (import.meta.env.DEV && key.includes('auth-token')) {
        logger.debug(`[Storage] getItem: ${key} -> ${value ? 'found' : 'not found'}`);
      }
      return value;
    } catch (error) {
      logger.error('[Storage] getItem error:', error);
      return null;
    }
  },
  setItem: (key: string, value: string) => {
    try {
      localStorage.setItem(key, value);
      if (import.meta.env.DEV && key.includes('auth-token')) {
        logger.debug(`[Storage] setItem: ${key} -> saved`);
      }
    } catch (error) {
      logger.error('[Storage] setItem error:', error);
    }
  },
  removeItem: (key: string) => {
    try {
      localStorage.removeItem(key);
      if (import.meta.env.DEV && key.includes('auth-token')) {
        logger.debug(`[Storage] removeItem: ${key}`);
      }
    } catch (error) {
      logger.error('[Storage] removeItem error:', error);
    }
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: reliableStorageAdapter,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storageKey: `sb-${import.meta.env.VITE_SUPABASE_PROJECT_ID}-auth-token`,
  }
});